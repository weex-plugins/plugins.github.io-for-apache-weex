!function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){var n=i(17),r=i(18),o=i(19);__weex_define__("@weex-component/2db5b02b2b2467ace4cdd68021452568",[],function(t,e,i){o(i,e,t),e.__esModule&&e.default&&(i.exports=e.default),i.exports.template=n,i.exports.style=r}),__weex_bootstrap__("@weex-component/2db5b02b2b2467ace4cdd68021452568",void 0,void 0)},function(t,e,i){var n=i(2),r=i(3),o=i(4);__weex_define__("@weex-component/unit",[],function(t,e,i){o(i,e,t),e.__esModule&&e.default&&(i.exports=e.default),i.exports.template=n,i.exports.style=r})},function(t,e){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,e){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},function(t,e){t.exports={type:"div",classList:["list"],children:[{type:"div",classList:["item"],repeat:{expression:function(){return this.data},value:"item"},children:[{type:"div",classList:["item-distance"],children:[{type:"unit",attr:{number:function(){return this.item.distance},label:"千米"}}]},{type:"div",classList:["item-time-info"],children:[{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.time},label:"分钟"}},{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.date},label:""}}]}]}]}},function(t,e){t.exports={item:{padding:20,borderTopWidth:1,borderTopColor:"#cccccc",flexDirection:"row"},"item-distance":{flex:1,justifyContent:"flex-start",alignItems:"flex-start"},"item-time-info":{flex:1,flexDirection:"row",justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e,i){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(1),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["navbar-con"],children:[{type:"div",classList:["navbar"],children:[{type:"div",classList:["btn-back"],shown:function(){return!this.hideReturn},events:{click:"goHome"},children:[{type:"image",classList:["btn-arrow-left"],attr:{src:"http://img1.vued.vanthink.cn/vued9c8e7e738ff94abee23eb69d7f1401e9.png"}},{type:"text",classList:["btn-text"],attr:{value:"返回"}}]},{type:"text",classList:["title"],attr:{value:function(){return this.title}}}]}]}},function(t,e){t.exports={"navbar-con":{height:108},navbar:{zIndex:1e3,position:"relative",display:"flex",flexDirection:"row",height:88,backgroundColor:"#ffffff",alignItems:"center",borderBottomWidth:2,borderBottomColor:"#dddddd"},"btn-back":{zIndex:1002,flexDirection:"row",alignItems:"center",width:180,height:88},"btn-arrow-left":{width:60,height:60,marginLeft:10},"btn-text":{color:"#0f89f5"},title:{position:"absolute",left:180,right:180,top:0,height:88,lineHeight:88,fontSize:36,textAlign:"center"}}},function(t,e){t.exports=function(t,e,i){"use strict";var n=i("@weex-module/navigator");t.exports={methods:{goHome:function(){n.pop()}}}}},,,,function(t,e){t.exports={type:"div",classList:["container"],children:[{type:"navbar",attr:{hideReturn:"true",title:"weex-sports"}},{type:"text",classList:["title"],attr:{value:"我的运动"}},{type:"div",classList:["data-container"],children:[{type:"div",classList:["data-circle"],children:[{type:"weex-percentage-circle",attr:{borderWidth:"8",color:"#e74c3c",percent:"70",radius:"150"}},{type:"div",classList:["btn-go"],events:{click:"go"},children:[{type:"text",classList:["btn-go-text"],attr:{value:"开始跑步"}}]}]},{type:"div",classList:["data-dashboard"],children:[{type:"div",classList:["data-dashboard-item"],children:[{type:"text",classList:["data-dashboard-label"],attr:{value:"距离"}},{type:"unit",attr:{number:function(){return this.total.distance},label:"公里"}}]},{type:"div",classList:["data-dashboard-item"],children:[{type:"text",classList:["data-dashboard-label"],attr:{value:"热量"}},{type:"unit",attr:{number:function(){return this.total.calories},label:"卡路里"}}]},{type:"div",classList:["data-dashboard-item"],children:[{type:"text",classList:["data-dashboard-label"],attr:{value:"时间"}},{type:"unit",attr:{number:function(){return this.total.time},label:"分钟"}}]}]}]},{type:"div",classList:["history-center"],children:[{type:"text",attr:{value:"历史记录"}},{type:"div",classList:["list"],children:[{type:"div",classList:["item"],repeat:{expression:function(){return this.historyData},value:"item"},attr:{index:function(){return this.$index}},events:{click:function(t){this.viewData(this.$index,t)}},children:[{type:"div",classList:["item-distance"],children:[{type:"unit",attr:{number:function(){return this.item.miles},label:"千米"}}]},{type:"div",classList:["item-time-info"],children:[{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.time},label:""}},{type:"unit",style:{flex:1},attr:{numberSize:"24",number:function(){return this.item.date},label:""}}]}]}]}]},{type:"text",classList:["footer"],attr:{value:"Powered By Weex"}}]}},function(t,e){t.exports={container:{position:"relative",flex:1,minHeight:800,backgroundColor:"#eeeeee"},title:{fontSize:45,padding:20,justifyContent:"center",alignItems:"center",color:"#e74c3c",backgroundColor:"#ffffff"},"data-container":{padding:20,borderBottomColor:"#dddddd",borderBottomWidth:2,backgroundColor:"#ffffff",justifyContent:"center"},"data-circle":{alignItems:"center"},"btn-go":{width:400,padding:20,marginTop:60,backgroundImage:"linear-gradient(to left, #FF4E50 , #F9D423)",borderWidth:4,borderColor:"#ffffff",borderRadius:10,alignItems:"center"},"btn-go-text":{color:"#ffffff"},"data-dashboard":{borderTopColor:"#dddddd",borderTopWidth:2,marginTop:20,flexDirection:"row"},"data-dashboard-item":{flex:1,alignItems:"center"},"data-dashboard-label":{fontSize:24,color:"#999999",paddingTop:20},"history-center":{padding:20,marginTop:40,marginBottom:20,backgroundColor:"#ffffff",borderBottomColor:"#dddddd",borderBottomWidth:2},item:{padding:20,borderTopWidth:1,borderTopColor:"#cccccc",flexDirection:"row"},"item-distance":{flex:1,justifyContent:"flex-start",alignItems:"flex-start"},"item-time-info":{flex:1,flexDirection:"row",justifyContent:"flex-end",alignItems:"flex-end"},footer:{fontSize:16,color:"#999999",padding:20,alignItems:"center"}}},function(t,e,i){t.exports=function(t,e,n){"use strict";i(20),i(24),i(1),i(25);var r=i(26),o=n("@weex-module/navigator"),s=n("@weex-module/storage");t.exports={data:function(){return{total:{distance:0,calories:0,time:0},plan:{distance:30},historyData:[]}},methods:{go:function(){var t=this.$getConfig().bundleUrl;o.push({url:r.setBundleUrl(t,"running.js")})},viewData:function(t){var e=this.$getConfig().bundleUrl;o.push({url:r.setBundleUrl(e,"running.js?index="+t)})}},created:function(){var t=this;s.getItem("runningData",function(e){if("success"==e.result)try{var i=JSON.parse(e.data);t.historyData=i,t.total.distance=r.calcTotal(i,"miles"),t.total.calories=r.calcTotal(i,"calories"),t.total.time=r.setTimeFormat(r.calcTotal(i,"seconds"))}catch(t){console.log("parse error ")}})}}}},function(t,e,i){var n=i(21),r=i(22),o=i(23);__weex_define__("@weex-component/weex-percentage-circle",[],function(t,e,i){o(i,e,t),e.__esModule&&e.default&&(i.exports=e.default),i.exports.template=n,i.exports.style=r})},function(t,e){t.exports={type:"div",classList:["circle"],style:{width:function(){return 2*this.radius},height:function(){return 2*this.radius},borderRadius:function(){return this.radius}},children:[{type:"div",classList:["left-wrap"],style:{width:function(){return this.radius},height:function(){return 2*this.radius},left:0},children:[{type:"div",classList:["loader"],id:"id1",style:{left:function(){return this.radius},width:function(){return this.radius},height:function(){return 2*this.radius},borderTopLeftRadius:0,borderBottomLeftRadius:0,backgroundColor:function(){return this.color}}}]},{type:"div",classList:["right-wrap"],style:{width:function(){return this.radius},height:function(){return 2*this.radius},left:function(){return this.radius}},children:[{type:"div",classList:["loader"],id:"id2",style:{left:function(){return-this.radius},width:function(){return this.radius},height:function(){return 2*this.radius},borderTopRightRadius:0,borderBottomRightRadius:0,backgroundColor:function(){return this.color}}}]},{type:"div",classList:["inner-circle"],style:{width:function(){return 2*(this.radius-this.borderWidth)},height:function(){return 2*(this.radius-this.borderWidth)},borderRadius:function(){return this.radius-this.borderWidth},backgroundColor:"#ffffff"},children:[{type:"text",style:{color:function(){return this.textColor}},attr:{value:function(){return this.percent+"%"}}}]}]}},function(t,e){t.exports={circle:{overflow:"hidden",position:"relative",justifyContent:"center",alignItems:"center",backgroundColor:"#e3e3e3"},"left-wrap":{overflow:"hidden",position:"absolute",top:0},"right-wrap":{overflow:"hidden",position:"absolute",top:0},loader:{position:"absolute",left:0,top:0,borderRadius:1e3},loader2:{position:"absolute",left:0,top:0,borderRadius:1e3},"inner-circle":{position:"relative",justifyContent:"center",alignItems:"center"},text:{fontSize:11,color:"#888888"}}},function(t,e){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i("@weex-module/animation");e.default={data:function(){return{radius:100,color:"#1ba1e2",borderWidth:2,percent:0,textColor:"#000"}},methods:{anim:function(t,e,i,r,o){var s=this.$el(t);n.transition(s,{styles:e,timingFunction:i,duration:r},o)}},ready:function(){var t="0deg",e="0deg";this.percent>=50?(e="180deg",t=3.6*(this.percent-50)+"deg"):e=3.6*this.percent+"deg";var i=this;i.anim("id1",{transform:"rotate("+t+")",transformOrigin:"0 50%"},"ease-in-out",500,function(){}),i.anim("id2",{transform:"rotate("+e+")",transformOrigin:"100% 50%"},"ease-in-out",500,function(){}),this.borderWidth<=2&&(this.borderWidth=2)}}}},function(t,e,i){var n=i(11),r=i(12),o=i(13);__weex_define__("@weex-component/navbar",[],function(t,e,i){o(i,e,t),e.__esModule&&e.default&&(i.exports=e.default),i.exports.template=n,i.exports.style=r})},function(t,e,i){i(1);var n=i(5),r=i(6),o=i(7);__weex_define__("@weex-component/list",[],function(t,e,i){o(i,e,t),e.__esModule&&e.default&&(i.exports=e.default),i.exports.template=n,i.exports.style=r})},function(t,e){"use strict";t.exports={calcTotal:function(t,e){var i=0;return t.forEach(function(t){i+=e?t[e]:t}),i},setTimeFormat:function(t){var e=this.setZero(Math.floor(t/3600)),i=this.setZero(Math.floor(t%3600/60)),n=this.setZero(t%60);return e+":"+i+":"+n},kmtom:function(t){return(t/1e3).toFixed(2)},getDate:function(){var t=new Date,e=t.getFullYear()+"-"+("0"+(1+t.getMonth())).slice("-2")+"-"+("0"+t.getDate()).slice(-2)+" "+("0"+t.getHours()).slice(-2)+":"+("0"+t.getMinutes()).slice(-2);return e},setZero:function(t){return t<10?"0"+t:t},calcSpeed:function(t,e){return(t/e*3.6).toFixed(2)},setPosition:function(t){var e=t.length,i=0,n=0;return t.forEach(function(t){i+=t[1],n+=t[0]}),[(n/e).toFixed(6),(i/e).toFixed(6)]},extend:function(t,e){for(var i in e)try{e[i].constructor===Object?t[i]=this.extend(t[i],e[i]):t[i]=e[i]}catch(n){t[i]=e[i]}return t},setBundleUrl:function(t,e){var i=t,n="",r="",o=void 0,s=i.indexOf("your_current_IP")>=0||i.indexOf("file://assets/")>=0,a=i.indexOf("file:///")>=0&&i.indexOf("WeexDemo.app")>0;if(s)o="file://assets/dist";else if(a)o=i.substring(0,i.lastIndexOf("/")+1);else{var d=/\/\/([^\/]+?)\//.exec(i),l=/\/\/.+\/([^\/]+?)\//.exec(i);d&&d.length>=2&&(n=d[1]),l&&l.length>=2&&(r=l[1]),o="http://"+n+"/"}var c="./index.html?page=",u=o;u="undefined"==typeof navigator||"Mozilla"!==navigator.appCodeName&&"Gecko"!==navigator.product?o+r+"/":"web"===r||"dist"===r?c+"/dist/":c+"";var f=u+e;return f},getUrlParam:function(t,e){var i=new RegExp("[?|&]"+e+"=([^&]+)"),n=t.match(i);return n&&n[1]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,