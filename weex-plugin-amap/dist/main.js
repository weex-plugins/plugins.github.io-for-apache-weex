/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackMissingModule() { throw new Error("Cannot find module \"run\""); }());
	module.exports = __webpack_require__(4);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ function(module, exports) {

	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(1);
		module.exports = __webpack_require__(4);
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		var _web = __webpack_require__(2);
		
		var _web2 = _interopRequireDefault(_web);
		
		var _web3 = __webpack_require__(3);
		
		var _web4 = _interopRequireDefault(_web3);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		window.weex && window.weex.install(_web2.default);
		
		window.weex && window.weex.install(_web4.default);
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var proto = {
		  create: function create() {
		    this.node = document.createElement('div');
		    this.inner = new Image();
		    this.inner.style.marginBottom = '10px';
		    this.node.style.padding = "5px 5px 10px 5px";
		    this.node.style.textAlign = "center";
		    this.node.style.border = '1px solid #ccc';
		    this.node.appendChild(this.inner);
		    this.node.appendChild(document.createElement('div'));
		
		    return this.node;
		  }
		};
		
		// attribute setters.
		var attr = {
		  text: function text(val) {
		    var text = document.createTextNode(val);
		    this.node.appendChild(text);
		  },
		  imgsrc: function imgsrc(val) {
		    this.inner.src = val;
		  }
		};
		
		// style setters.
		var style = {
		  txtColor: function txtColor(val) {
		    this.inner.style.color = val;
		  }
		};
		
		// event config.
		var event = {
		  click: {
		    extra: function extra() {
		      return {
		        value: this.inner.textContent
		      };
		    }
		  }
		};
		
		function init(Weex) {
		  var Component = Weex.Component;
		  var extend = Weex.utils.extend;
		
		  function PolaroidPhoto(data) {
		    Component.call(this, data);
		  }
		
		  PolaroidPhoto.prototype = Object.create(Component.prototype);
		  extend(PolaroidPhoto.prototype, proto);
		  extend(PolaroidPhoto.prototype, { attr: attr });
		  extend(PolaroidPhoto.prototype, {
		    style: extend(Object.create(Component.prototype.style), style)
		  });
		  extend(PolaroidPhoto.prototype, { event: event });
		
		  Weex.registerComponent('weex-chart', PolaroidPhoto);
		}
		
		exports.default = { init: init };
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var defaultAttr = {
		  zoom: 11,
		  resizeEnable: true
		};
		
		// prototype methods.
		var proto = {
		  create: function create() {
		    var node = document.createElement('div');
		    this.mapwrap = document.createElement('div');
		    this.mapwrap.id = 'map' + new Date().getTime().toString().substring(9, 3) + parseInt(Math.random() * 10000);
		
		    this.mapwrap.append(document.createTextNode('高德地图加载中...'));
		    var lib = document.createElement('script');
		    lib.src = 'http://webapi.amap.com/maps?v=1.3';
		    lib.addEventListener('load', function () {
		      window.maploaded = true;
		    });
		    this.mapwrap.append(lib);
		    node.appendChild(this.mapwrap);
		    this.ready();
		    return this.mapwrap;
		  },
		  ready: function ready() {
		    var self = this;
		    console.log(self);
		    var intval = window.setInterval(function () {
		      if (window.AMap) {
		        self.map = new AMap.Map(self.mapwrap.id, {
		          center: [117.000923, 36.675807],
		          zoom: 11
		        });
		        AMap.plugin(['AMap.ToolBar'], function () {
		          self.map.addControl(new AMap.ToolBar());
		        });
		        clearInterval(intval);
		      }
		    }, 100);
		  }
		};
		
		var attr = {
		  value: function value(val) {
		    this.value = val;
		    this.inner.textContent = 'Hello ' + val + '!';
		  },
		  geolocation: function geolocation(val) {
		    var self = this;
		    if (val) {
		      console.log(val);
		    }
		  }
		};
		
		// style setters.
		var style = {};
		
		// event config.
		var event = {};
		
		function init(Weex) {
		  var Component = Weex.Component;
		  var extend = Weex.utils.extend;
		
		  function Amap(data) {
		    Component.call(this, data);
		  }
		
		  Amap.prototype = Object.create(Component.prototype);
		  extend(Amap.prototype, proto);
		  extend(Amap.prototype, { attr: attr });
		  extend(Amap.prototype, {
		    style: extend(Object.create(Component.prototype.style), style)
		  });
		  extend(Amap.prototype, { event: event });
		
		  Weex.registerComponent('weex-amap', Amap);
		}
		
		exports.default = { init: init };
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		'use strict';
		
		/**
		 * Init weex instance depending on the url params.
		 * There are three ways to load weex bundles, depends on the
		 * parameter 'loader' in the url:
		 *
		 *   + xhr: use XMLHttpRequest. Parameter 'page' should be
		 *   the bundle's url.
		 *   + source: use the transformed code itself. 'page' should
		 *   be the transformed weex bundle.
		 *
		 * @param {String} bundle - It has different meaning depends on
		 *   the type of loader.
		 */
		
		(function () {
		  function getUrlParam(key) {
		    var reg = new RegExp('[?|&]' + key + '=([^&]+)');
		    var match = location.search.match(reg);
		    return match && match[1];
		  }
		  var loader = getUrlParam('loader') || 'xhr';
		  var page = getUrlParam('page') || '../dist/index.js';
		  window.weex.init({
		    appId: location.href,
		    loader: loader,
		    source: page,
		    rootId: 'weex'
		  });
		})();
	
	/***/ }
	/******/ ]);
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,